""""""""""""""""""
" Pathogen
""""""""""""""""""

execute pathogen#infect()
" execute pathogen#helptags()
Helptags

""""""""""""""""""
" Useful functions
""""""""""""""""""

function! NAltMap(key, command)
	if $TERM == 'rxvt-unicode-256color' && !has('gui_running')
		execute 'noremap <silent> <Esc>' . a:key . ' ' . a:command . '<CR>'
	else
		execute 'noremap <silent> <A-' . a:key '> ' . a:command . '<CR>'
	endif
endfunc

""""""""""""""""""
" Useful variables
""""""""""""""""""

let vimdir = '$HOME/.vim'
if has("win32")
	let vimdir = '$HOME/vimfiles'
endif

""""""""""""""""""
" GVim configuration
""""""""""""""""""

:set guioptions-=m "remove menu
:set guioptions-=T "remove toolbar
:set guioptions-=r "remove right scroll bar
:set guioptions-=L "remove left scroll bar
":set visualbell
":set t_vb= "" Disable Bell

""""""""""""""""""
" Vim configuration
""""""""""""""""""

" Syntax
filetype plugin indent on
syntax on
syntax enable

" Editor GUI
:set guifont=Consolas:h12
" :set guifont=Terminus\ 9
:set number
:set cursorline
:set showcmd
:set scrolloff=4 " Allways n lines visisble when scrolling

" Editor
:set noesckeys " Disable Esc-key escape sequences
:call NAltMap('n', ':set relativenumber! relativenumber?')
" Copy all lines to clipboard
:nnoremap <Leader>y gg"+yG
" Paste from clipboard
:nnoremap <Leader>p "+p

" Indentation
:set tabstop=2
:set shiftwidth=2

" Search
:set wildmenu
:set showmatch
:set incsearch
:set hlsearch
:nnoremap <silent> <space> :set hlsearch! hlsearch?<CR>

" Undo
if has('persistent_undo')
	let myundodir = expand(vimdir . '/undodir')
	" Create dirs
	if empty(glob(myundodir))
		call system('mkdir ' . vimdir)
		call system('mkdir ' . myundodir)
	endif
	let &undodir = myundodir
	:set undofile
	:set undolevels=1000 " Maximum number of changes that can be undone
	:set undoreload=10000 " Maximum number of lines to save for undo on a buffer reload
endif

" Folding
:set foldenable
:set foldlevelstart=10
:set foldnestmax=10
:set foldmethod=indent

" File settings
:set encoding=utf8
:set nobackup
:set backspace=indent,eol,start
:set fileformat=unix
:set fileformats=unix,dos

" Window Switching
:call NAltMap('k', ':wincmd k')
:call NAltMap('j', ':wincmd j')
:call NAltMap('h', ':wincmd h')
:call NAltMap('l', ':wincmd l')
"
" Remove trailing whitespace before saving buffer
autocmd BufWritePre * :%s/\s\+$//e

" Extra files
augroup filetype
	autocmd!
	" GLSL
	autocmd BufNewFile,BufRead *.vert,*.frag,*.tesc,*.tese,*.geom,*.comp set filetype=c
	" jflex
	autocmd BufNewFile,BufRead *.flex,*.jflex set filetype=jflex
	" Haskell
	autocmd Filetype haskell setlocal softtabstop=2 expandtab
	autocmd BufNewFile,BufRead *.hamlet,*.lucius,*.casius setlocal softtabstop=2 expandtab
	autocmd BufNewFile,BufRead *.hamlet set filetype=html
	autocmd BufNewFile,BufRead *.lucius,*.cassius set filetype=css
	autocmd BufNewFile,BufRead *.julius set filetype=javascript

augroup END
au Syntax jflex so $VIM/vimfiles/syntax/jflex.vim

""""""""""""""""""
" Plugins
""""""""""""""""""

" ag.vim

" base16-vim
" let base16colorspace=256
" colorscheme base16-eighties

" emmet-vim
let g:user_emmet_install_global = 0
autocmd FileType html,css EmmetInstall

" gruvbox

" jellybeans.vim
set background=dark
colorscheme jellybeans
" if has('gui_running')
" else
" 	:highlight Normal ctermbg=NONE
" endif
" :hi Normal ctermbg=NONE
set fillchars+=vert:â”‚

" lightline.vim
" \ 'colorscheme': 'solarized_dark',
let g:lightline = {
	\ 'colorscheme': 'jellybeans',
	\ 'active': {
	\ 	'left': [['mode', 'paste'], ['fugitive', 'filename', 'modified']]
	\ },
	\ 'component' : {
	\	'fugitive': '%{exists("*fugitive#head")?fugitive#head():""}'
	\ },
	\ 'component_visible_condition': {
	\	'fugitive': '(exists("*fugitive#head") && ""!=fugitive#head())'
	\ }
	\ }
set laststatus=2

" neocomplete
let g:neocomplete#enable_at_startup = 1

" nerdtree
map <C-n> :NERDTreeToggle<CR>
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

" tagbar
" nmap <C-S-space> :TagbarToggle<CR>
" nmap <C-space> :TagbarToggle<CR>
map <F8> :TagbarToggle<CR>

" vim-colors-solarized

" colorscheme solarized
" vim-commentary
" vim-cpp-enhanced-highlight

" vim-indent-guides
let g:indent_guides_enable_on_vim_startup=1

" vim-javascript
" vim-surround

" vim2hs
let g:haskell_conceal = 0
let g:haskell_conceal_enumeration = 0
let g:haskell_quasi = 0
let g:haskell_interpolation = 0
let g:haskell_regex = 0
let g:haskell_regex = 0
let g:haskell_jmacro = 0
let g:haskell_shqq = 0
let g:haskell_sql = 0
let g:haskell_json = 0
let g:haskell_xml = 0
let g:haskell_hsp = 0
let g:haskell_tabular = 0
